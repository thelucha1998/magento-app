version: '3.7'

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-10-29T16-01-48Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    - MINIO_ROOT_USER=minioadmin
    - MINIO_ROOT_PASSWORD=minioadmin
    - MINIO_PROMETHEUS_AUTH_TYPE=public

    - MINIO_NOTIFY_ELASTICSEARCH_ENABLE_PRIMARY=on
    - MINIO_NOTIFY_ELASTICSEARCH_URL_PRIMARY=http://elasticsearch2:9200
    - MINIO_NOTIFY_ELASTICSEARCH_INDEX_PRIMARY=elastic
    - MINIO_NOTIFY_ELASTICSEARCH_FORMAT_PRIMARY=access
    - MINIO_NOTIFY_ELASTICSEARCH_USERNAME_PRIMARY=elastic
    - MINIO_NOTIFY_ELASTICSEARCH_PASSWORD_PRIMARY=elastic
    - MINIO_NOTIFY_ELASTICSEARCH_QUEUE_DIR_PRIMARY=/opt/minio/events
    - MINIO_NOTIFY_ELASTICSEARCH_QUEUE_LIMIT_PRIMARY=100000
    - MINIO_NOTIFY_ELASTICSEARCH_COMMENT_PRIMARY=ok

    #- MINIO_NOTIFY_REDIS_ENABLE_PRIMARY=on
    #- MINIO_NOTIFY_REDIS_REDIS_ADDRESS_PRIMARY=redis:9200
    #- MINIO_NOTIFY_REDIS_KEY_PRIMARY=bucketevents
    #- MINIO_NOTIFY_REDIS_FORMAT_PRIMARY="namespace
  healthcheck:
    test: ["CMD", "mc", "ready", "local"]
    interval: 5s
    timeout: 5s
    retries: 5
  networks:
    - minio

# starts 2 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    container_name: minio1
    volumes:
      - ./minio-data1-1:/data1
      - ./minio-data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    container_name: minio2
    volumes:
      - ./minio-data2-1:/data1
      - ./minio-data2-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    container_name: nginx
    user: root
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - minio
      - sharednet
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
  
  # Elasticsearch

  elasticsearch:
    container_name: elasticsearch2
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1  
    ports:
      - 9202:9200
    restart: always
    networks:
      - minio
    volumes:
      #- ../elk/esdata:/usr/share/elasticsearch/data
      - ../elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=elastic
  kibana:
    container_name: kibana2
    image: elastic/kibana:7.9.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch2:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    depends_on:
      - elasticsearch
    ports:
      - 5604:5601
    networks:
      - minio
  # Redis
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    #command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    command: redis-server /etc/redis/redis.conf
    volumes:
      #- redis-data:/data
      #- /path/to/local/dÐ°ta:/root/redis
      #- /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
      - ../redis/redis.conf:/etc/redis/redis.conf
      - ./cache:/data
    environment:
      - REDIS_PASSWORD=redis
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    networks:
      - minio
  redisinsight:
    container_name: redisinsight
    image: redis/redisinsight:latest
    ports:
      - 5541:5540
    restart: always
    networks:
      - minio
  # Monitoring
  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitor/prometheus:/etc/prometheus
      - ./monitor/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      #- 'prometheus --config.file=./monitor/prometheus.yaml'
    networks:
      - minio
    user: root
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    ports:
      - 9100:9100
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - minio
    user: root
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - ./monitor/grafana_data:/var/lib/grafana
      - ./monitor/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - minio
    user: root

  # Kafka
  zookeeper:
    image: bitnami/zookeeper:3.7.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafkanet
      - minio
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./.bitnami/zookeeper/data:/bitnami/zookeeper/data
  kafka:
    image: bitnami/kafka:2.8.1
    container_name: kafka
    expose:
      - 9092
    ports:
      - "9093:9093"
    networks:
      - kafkanet
      - sharednet
      - minio
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - ./.bitnami/kafka/data:/bitnami/kafka/data
      - ./.bitnami/kafka/logs:/opt/bitnami/kafka/logs
    depends_on:
      - zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui:master
    container_name: kafka-ui
    ports:
      - "8080:8080"
    networks:
      - kafkanet
      - minio
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
  
networks:
  minio:
    driver: bridge
  sharednet:
    name: mysharednetwork
    driver: bridge
  kafkanet:
    name: kafka-network

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
